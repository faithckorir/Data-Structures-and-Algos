package data_structures.trees.BinaryTree

import data_structures.trees.BinaryTree.HuffmanNode
import kotlin.jvm.JvmStatic
import data_structures.trees.BinaryTree.MyComparator
import java.util.*

// node class is the basic structure
// of each node present in the Huffman - tree.
class HuffmanNode(var data:Int,var c:Char) {
    //var data = 0
    //var c = 0.toChar()
    var left: HuffmanNode? = null
    var right: HuffmanNode? = null
} // comparator class helps to compare the node

// on the basis of one of its attribute.
// Here we will be compared
// on the basis of data values of the nodes.
internal class MyComparator : Comparator<HuffmanNode> {
    override fun compare(x: HuffmanNode, y: HuffmanNode): Int {
        return x.data - y.data
    }

}

object Huffman {
    // recursive function to print the
    // huffman-code through the tree traversal.
    // Here s is the huffman - code generated.
    fun printCode(root: HuffmanNode?, s: String) {

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (
            (root!!.left == null)
            && (root.right== null)
            && Character.isLetter(root.c)
        ) {

            // c is the character in the node
            println(root.c.toString() + ":" + s)
            return
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0")
        printCode(root.right, s + "1")
    }

    // main function
    @JvmStatic
    fun main(args: Array<String>) {
        val s = Scanner(System.`in`)

        // number of characters.
        val n = 6
        val charArray = charArrayOf('a', 'b', 'c', 'd', 'e', 'f')
        val charfreq = intArrayOf(5, 9, 12, 13, 16, 45)

        // creating a priority queue q.
        // makes a min-priority queue(min-heap).
        val q = PriorityQueue(n, MyComparator())
        for (i in 0 until n) {

            // creating a Huffman node object
            // and add it to the priority queue.
            val hn = HuffmanNode(charfreq[i],charArray[i])
            //hn.c = charArray[i]
            //hn.data = charfreq[i]
            hn.left = null
            hn.right = null

            // add functions adds
            // the huffman node to the queue.
            q.add(hn)
        }

        // create a root node
        var root: HuffmanNode? = null

        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size > 1) {

            // first min extract.
            val x = q.peek()
            q.poll()

            // second min extract.
            val y = q.peek()
            q.poll()

            // new node f which is equal
            val f = HuffmanNode(x.data + y.data,'-')

            // to the sum of the frequency of the two nodes
            // assigning values to the f node.


            // first extracted node as left child.
            f.left = x

            // second extracted node as the right child.
            f.right = y

            // marking the f node as the root node.
            root = f

            // add this node to the priority-queue.
            q.add(f)
        }

        // print the codes by traversing the tree
        printCode(root, "")
    }
}